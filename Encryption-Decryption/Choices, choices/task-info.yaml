type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.*;
    import java.util.HashMap;
    import java.util.Scanner;

    public class Main {

        private static String input;
        private static int modulator;
        private static String  xFile = "";



        public static void encrypt() {

            char[] arr = input.toCharArray();
            for (char inputChar : arr) {
                if (inputChar > 31 && inputChar < 127) {
                    char encryptedChar = (char) (inputChar + modulator);
                    if (encryptedChar > 127) {
                        encryptedChar = (char) (encryptedChar - 92);
                    }
                    xFile += encryptedChar;

                }
            }
        }

        public static void decrypt() {

            char[] arr = input.toCharArray();
            for (char inputChar : arr) {
                if (inputChar > 31 && inputChar < 127) {
                    char decryptedChar = (char) (inputChar - modulator);
                    if (decryptedChar < 32) {
                        decryptedChar = (char) (decryptedChar + 92);
                    }
                    xFile += decryptedChar;

                }
            }
        }


        public static void main(String[] args) {
            HashMap<String, String> mapa = new HashMap<>();
            for (int i = 0; i < args.length; i += 2) {
                mapa.put(args[i], args[i + 1]);
            }
            String exampleIn;
            String exampleOut;


            // KEY
            modulator = Integer.parseInt(mapa.getOrDefault("-key", "0"));
            // INPUT OR DATA
            // oba puste

            if (mapa.get("-data") == null && mapa.get("-in") == null) {
                input = "";
                // oba nie puste
            } else if ((mapa.get("-data") != null) && (mapa.get("-in") != null)) {
                input = mapa.get("-data");
                // data puste, in nie puste
            } else if (mapa.get("-data") == null && mapa.get("-in") != null) {
                exampleIn = mapa.get("-in");
                File file = new File(exampleIn);

                try {
                    Scanner scanner = new Scanner(file);
                    input = scanner.nextLine();
                    scanner.close();
                } catch (FileNotFoundException e) {
                    System.out.println("Error 1");
                }
                // in puste, data nie puste
            } else if (mapa.get("-in") == null && mapa.get("-data") != null) {
                input = mapa.get("-data");
            }

            // MODE ENC/DEC

            if (mapa.getOrDefault("-mode", "enc").equals("enc")) {
                encrypt();
            } else {
                decrypt();
            }

            // OUT OR PRINT
            exampleOut = mapa.get("-out");
            if (exampleOut == null) {
                System.out.println(xFile);
            } else {
                try {
                    File fileOut = new File(exampleOut);
                    FileWriter writer = new FileWriter(fileOut);
                    writer.append(xFile);
                    writer.close();
                } catch (Exception e) {
                    System.out.println("Error 2");
                }


            }
        }
    }
  learner_created: true
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/46/stages/250/implement">JetBrains
    Academy</a>
  time: Wed, 21 Oct 2020 23:13:49 UTC
record: -1
